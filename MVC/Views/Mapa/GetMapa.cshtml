@model ML.Sucursal
@{
    ViewBag.Title = "GetMapa";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<html>
<head>
    @*<script async defer
                src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCHRCMnJLduTw6G0h7id93iBouneN2jbGc&callback=InitMap&libraries=maps,marker&v=beta">

        </script>*@
    <title>Mapa</title>
    <style>
        #map {
            height: 100%;
        }

        html,
        body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
    </style>
</head>

<body>
    <div id="map" style="height: 500px; width: 100%"></div>
</body>
</html>
<script>

    (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
        ({ key: "AIzaSyCHRCMnJLduTw6G0h7id93iBouneN2jbGc", v: "weekly" });

    let lat = 19.430519756512695;
    let long = - 99.16166766249151;
    let myLatLong = { lat: lat, lng: long };
    let marker;
    let infoWindow = null;
    let infoWindowAdd = null;
    let markerAdd = null;
    async function initMap() {

        const { Map, InfoWindow } = await google.maps.importLibrary("maps");
        const { AdvancedMarkerElement } = await google.maps.importLibrary("marker");
        const map = new Map(document.getElementById("map"), {
            center: myLatLong,
            zoom: 12,
            mapId: "DEMO_MAP_ID",
        });



        @if (Model.Sucursales!=null) {
            foreach (ML.Sucursal sucursal in Model.Sucursales)
            {
                <Text>
                    marker = new AdvancedMarkerElement({
                    map,
                        position: {lat: @sucursal.Latitud, lng: @sucursal.Longitud},
                        title: '@sucursal.Nombre'
                    });
                    infoWindow = new InfoWindow({
                        content: '@sucursal.Nombre'
                    });
                    (function (marker, infoWindow) {
                        marker.addListener('click', function () {
                            if (infoWindowAdd != null) {
                                infoWindowAdd.close();
                            }
                            if (markerAdd != null) {
                                markerAdd.setMap(null);
                            }
                            infoWindow.open(map, marker);
                        });
        })(marker, infoWindow);
                </Text>
            }
        }

        map.addListener("click", (event) => {
            if (markerAdd != null) {
                markerAdd.setMap(null);
            }
            if (infoWindowAdd != null) {
                infoWindowAdd.close();
            }
            markerAdd = new AdvancedMarkerElement({
                map,
                position: event.latLng,
                title: JSON.stringify(event.latLng.toJSON()),
            });
            infoWindowAdd = new InfoWindow({
                content: JSON.stringify(event.latLng.toJSON())
            });
            infoWindowAdd.setContent(markerAdd.title);
            markerAdd.addListener("click", () => {
                infoWindowAdd.open(markerAdd.map, markerAdd);
            });
        });
    }

    initMap();
</script>


